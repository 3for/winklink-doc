(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{377:function(t,e,n){"use strict";n.r(e);var r=n(24),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"搭建-winklink-节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#搭建-winklink-节点"}},[t._v("#")]),t._v(" 搭建 WINkLink 节点")]),t._v(" "),n("p",[t._v("本节介绍如何加入 WINkLink 生态：部署预言机合约，搭建 WINkLink 节点。")]),t._v(" "),n("p",[t._v("目前 WINkLink 不区分 Oracle 合约拥有者和预言机节点运营者。\n即预言机节点的运营者同时是 Oracle 合约的拥有者。预言机节点账户只处理数据源和数据提交，\nOracle 合约拥有者可以通过合约调用，提取 Oracle 合约使用者所支付的使用费。")]),t._v(" "),n("h2",{attrs:{id:"准备工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" 准备工作")]),t._v(" "),n("p",[t._v("WINkLink 的维护者需要对 TRON 有一定的了解，熟悉智能合约部署和调用流程。\n建议参考 "),n("a",{attrs:{href:"https://cn.developers.tron.network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("主要阅读 TronIDE 合约部署相关内容。")]),t._v(" "),n("h2",{attrs:{id:"合约部署"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合约部署"}},[t._v("#")]),t._v(" 合约部署")]),t._v(" "),n("p",[t._v("WINkLink 生态采用去中心化架构，所有智能合约开源，任何组织和个人都可以部署自己的 WINkLink 预言机合约，\n并对外公布所提供的服务。")]),t._v(" "),n("p",[t._v("用户可以从各个公开 WINkLink 服务中选择自己所需的组合，创建自己的聚合数据合约，从去中心化受益。")]),t._v(" "),n("p",[t._v("项目合约地址位于: "),n("a",{attrs:{href:"https://github.com/wink-link/winklink/tree/master/tvm-contracts/v1.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/wink-link/winklink/tree/master/tvm-contracts/v1.0"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("开发者需要使用 "),n("a",{attrs:{href:"https://github.com/tronprotocol/solidity/releases/tag/0.4.25_Odyssey_v3.2.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("tron-solidity 0.4.25"),n("OutboundLink")],1),t._v("\n编译器编译。(或在 TronIDE 中选择该版本)")]),t._v(" "),n("p",[t._v("合约的部署和测试调用可以使用如下任一工具或程序库：")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/tronprotocol/wallet-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方 wallet-cli 工具"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://cn.developers.tron.network/docs/ide%E5%85%A5%E9%97%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("TronIDE, 同时支持合约编译"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://cn.developers.tron.network/docs/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2",target:"_blank",rel:"noopener noreferrer"}},[t._v("TronBox, 同时支持合约编译"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://cn.developers.tron.network/reference#tronwebcontractnew",target:"_blank",rel:"noopener noreferrer"}},[t._v("tronweb"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://tronpy.readthedocs.io/en/latest/contract.html#creating-smart-contract",target:"_blank",rel:"noopener noreferrer"}},[t._v("tronpy"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/andelf/rust-tron/blob/master/docs/contract.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("rust-tron"),n("OutboundLink")],1)])]),t._v(" "),n("h3",{attrs:{id:"winkmid-合约"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#winkmid-合约"}},[t._v("#")]),t._v(" WinkMid 合约")]),t._v(" "),n("p",[t._v("WINkLink 使用 WIN 代币(TRC20)作为整个生态的基础代币。")]),t._v(" "),n("p",[t._v("WINkLink 依赖 "),n("code",[t._v("transferAndCall")]),t._v(" 功能，即在转账 TRC20 代币给合约的同时调用合约的某一回调函数，相关功能类似 "),n("a",{attrs:{href:"https://github.com/ethereum/EIPs/issues/677",target:"_blank",rel:"noopener noreferrer"}},[t._v("ERC677"),n("OutboundLink")],1),t._v(", 但接口参数不同。")]),t._v(" "),n("p",[t._v("考虑到绝大多数已发行的代币无法再修改合约增加接口, WINkLink 提供了 "),n("code",[t._v("WinkMid")]),t._v(" 合约，可以用来包装任一 TRC20 代币，并提供\n"),n("code",[t._v("transferAndCall")]),t._v(" 接口。")]),t._v(" "),n("p",[t._v("合约代码位于 "),n("a",{attrs:{href:"https://github.com/wink-link/winklink/blob/feature/rename2wink/tvm-contracts/v1.0/WinkMid.sol",target:"_blank",rel:"noopener noreferrer"}},[t._v("WinkMid.sol"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("p",[t._v("为方便开发者, Nile 测试网已经部署了 "),n("code",[t._v("WinkMid")]),t._v(" 合约，封装了 Nile 测试网 "),n("code",[t._v("WIN")]),t._v(" 代币。\n开发者可直接使用该合约地址，无需额外部署。 Nile 测试网同时提供了水龙头地址可以领取测试 TRX 和 WIN 代币。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Nile 测试网")]),t._v(" "),n("ul",[n("li",[t._v("WIN 代币合约地址: "),n("code",[t._v("TLa2f6VPqDgRE67v1736s7bJ8Ray5wYjU7")])]),t._v(" "),n("li",[t._v("WinkMid 合约地址: "),n("code",[t._v("TFbci8j8Ja3hMLPsupsuYcUMsgXniG1TWb")])]),t._v(" "),n("li",[t._v("测试网水龙头: "),n("a",{attrs:{href:"https://nileex.io/join/getJoinPage",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://nileex.io/join/getJoinPage"),n("OutboundLink")],1)])])]),t._v(" "),n("p",[t._v("部署 WinkMid 合约时候需要在构造函数提供被封装的 TRC20 代币地址（即 WIN 代币地址）。")]),t._v(" "),n("p",[t._v("所有对 WinkMid 合约的操作均在合约中进行，开发者不需要直接调用该合约。")]),t._v(" "),n("h3",{attrs:{id:"oracle-合约"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#oracle-合约"}},[t._v("#")]),t._v(" Oracle 合约")]),t._v(" "),n("p",[t._v("Oracle 合约是部署在 TRON 公链上的预言机合约。主要功能如下")]),t._v(" "),n("ul",[n("li",[t._v("接收消费者合约(Consumer Contract)的数据请求，触发 Event Log\n"),n("ul",[n("li",[t._v("数据请求发送时会附带 WIN 转账作为使用费用")])])]),t._v(" "),n("li",[t._v("接受 WINkLink 节点所提交的数据\n"),n("ul",[n("li",[t._v("WINkLink 节点通过监听 Event Log 获知数据请求")]),t._v(" "),n("li",[t._v("节点通过识别 job 配置，选择调用不同数据请求对应的适配器，获得外部数据，向 Oracle 合约提交数据")]),t._v(" "),n("li",[t._v("触发消费者合约的数据回调函数")])])]),t._v(" "),n("li",[t._v("支持撤销数据请求")]),t._v(" "),n("li",[t._v("对数据请求的 WIN 代币费用进行结算，提取收益")])]),t._v(" "),n("p",[t._v("合约代码位于 "),n("a",{attrs:{href:"https://github.com/wink-link/winklink/blob/master/tvm-contracts/v1.0/TronOracles.sol",target:"_blank",rel:"noopener noreferrer"}},[t._v("TronOracles.sol"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("p",[t._v("部署 Oracle 合约时需要在构造函数提供 WIN 代币地址和 WinkMid 合约地址。")]),t._v(" "),n("p",[t._v("Oracle 合约实现了 "),n("code",[t._v("Ownable")]),t._v(" 接口，合约的 owner 可以管理收益或销毁合约。")]),t._v(" "),n("h2",{attrs:{id:"节点部署"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节点部署"}},[t._v("#")]),t._v(" 节点部署")]),t._v(" "),n("p",[t._v("合约部署完毕后，就可以开始 WINkLink 节点部署。")]),t._v(" "),n("p",[t._v("WINkLink 节点(项目目录 "),n("code",[t._v("node")]),t._v(")代码位于: "),n("a",{attrs:{href:"https://github.com/wink-link/winklink/tree/master/node",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/wink-link/winklink/tree/master/node"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("目前的节点实现包含通过交易所 API 获取币价的适配器。请在稳定的非中国大陆网络环境中运行节点。")])]),t._v(" "),n("h3",{attrs:{id:"准备节点帐号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备节点帐号"}},[t._v("#")]),t._v(" 准备节点帐号")]),t._v(" "),n("p",[t._v("每个 WINkLink 节点都必须对应一个 TRON 帐号，用于调用 Oracle 合约提交数据。")]),t._v(" "),n("p",[t._v("开发者生成帐号地址和私钥后，通过测试网水龙头页面投测试 TRX 代币。该代币用于支付智能合约调用的必要费用。")]),t._v(" "),n("p",[t._v("开发者可以选用以下任一方法生成帐号地址和私钥：")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/tronprotocol/wallet-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方 wallet-cli 工具"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://andelf.gitbook.io/tron/tron-by-example/generate-address-offline",target:"_blank",rel:"noopener noreferrer"}},[t._v("Generate Address Offline"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/ki5fpl/tronj/blob/master/client/src/test/java/com/github/ki5fpl/tronj/client/ClientTest.java#L70",target:"_blank",rel:"noopener noreferrer"}},[t._v("tronj"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/andelf/tronpy/blob/master/examples/generate_address.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("tronpy"),n("OutboundLink")],1)])]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("通过非信任的网络传输私钥会有泄露风险。请通过离线方式生成地址和私钥。")])]),t._v(" "),n("h3",{attrs:{id:"依赖环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖环境"}},[t._v("#")]),t._v(" 依赖环境")]),t._v(" "),n("p",[t._v("WINkLink 节点依赖 MySQL 实例。开发者可以使用目标环境的软件包管理器或 Docker 部署 MySQL 实例。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("这里假定本机部署的 MySQL 实例的用户名和密码分别是 "),n("code",[t._v("root:root")]),t._v("。在生产环境中请使用强密码或其他验证方式。")])]),t._v(" "),n("p",[t._v("WINkLink 节点使用 Java 语言编写，依赖 JRE/JDK 环境，建议使用 Oracle JDK8.")]),t._v(" "),n("p",[t._v("WINkLink 节点依赖 nodejs 环境，需要安装 nodejs(npm) >= 10.0.")]),t._v(" "),n("h3",{attrs:{id:"获取节点可执行程序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取节点可执行程序"}},[t._v("#")]),t._v(" 获取节点可执行程序")]),t._v(" "),n("p",[t._v("开发者可以在 "),n("a",{attrs:{href:"https://github.com/wink-link/winklink/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github Release"),n("OutboundLink")],1),t._v(" 页面下载到到最新版本的 WINkLink 节点可执行程序 "),n("code",[t._v("node-v1.0.jar")]),t._v("。")]),t._v(" "),n("p",[t._v("也可以按照如下步骤编译:")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要 jdk8, 和 nodejs(npm) >= 10.0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@github.com:wink-link/winklink.git\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" winklink/\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译")]),t._v("\n./gradlew build -x "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n")])])]),n("p",[t._v("编译完成后 "),n("code",[t._v("node-v1.0.jar")]),t._v(" 位于项目源码目录下的 "),n("code",[t._v("node/build/libs/")]),t._v(" 中。")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("这里的编译过程中忽略了测试("),n("code",[t._v("-x test")]),t._v(")，这是因为测试用例中包含交易所币价 API 测试用例，\n这些测试用例需要稳定的非中国大陆网络环境。")])]),t._v(" "),n("h3",{attrs:{id:"节点配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节点配置"}},[t._v("#")]),t._v(" 节点配置")]),t._v(" "),n("p",[t._v("WINkLink 节点使用 springboot 方式配置。所有配置文件位于项目子目录 "),n("code",[t._v("node/src/main/resource")]),t._v(".\n"),n("code",[t._v("application.yml")]),t._v(" 可以指定使用的具体 profile.")]),t._v(" "),n("div",{staticClass:"language-yml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# application.yml")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dev|pro")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("active")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里设置具体的 profile 文件，即 `application-dev.yml`")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jackson")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("time-zone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" GMT+8\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("date-format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" yyyy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("MM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dd HH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ss\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("servlet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("multipart")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxRequestSize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("104857600")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#100MB")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ... (omitted)")]),t._v("\n")])])]),n("p",[n("code",[t._v("application-[ACTIVE_PROFILE_NAME].yml")]),t._v(" 中可以指定具体的 MySQL 数据库连接配置，\n默认 "),n("code",[t._v("dev")]),t._v(" 使用本机实例，用户名密码为 "),n("code",[t._v("root:root")]),t._v(".")]),t._v(" "),n("p",[t._v("节点配置文件确认完毕后，还需要创建 "),n("code",[t._v("key.store")]),t._v(" 文件, 写入节点帐号的私钥:")]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("privatekey=*****(32字节 hex 编码私钥)\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("通过文件而非命令行参数提供私密信息是重要的安全性考虑，在生产环境需要设定私密文件 "),n("code",[t._v("key.store")]),t._v(" 权限为 600,\n即只有拥有者可读写。")])]),t._v(" "),n("h3",{attrs:{id:"启动节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动节点"}},[t._v("#")]),t._v(" 启动节点")]),t._v(" "),n("p",[t._v("所有配置文件都需要被复制到节点程序当前运行时目录，即 "),n("code",[t._v("cp node/src/main/resource/*.yml ./")]),t._v(".")]),t._v(" "),n("p",[t._v("使用如下命令启动 WINkLink 节点程序：")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("java -jar node/build/libs/node-v1.0.jar -k key.store\n")])])]),n("p",[t._v("具体的配置项目也可以通过命令行指定，例如：")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("java -jar node/build/libs/node-v1.0.jar --server.port"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v(" --spring.profiles.active"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("dev --key key.store\n")])])]),n("p",[t._v("使用如下命令判断 WINkLink 节点是否正常运行：")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" -f logs/tron.log\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),n("p",[t._v("节点帐号必须有足够的 TRX 代币，用于合约调用。可以通过测试网水龙头地址申请。")])]),t._v(" "),n("h3",{attrs:{id:"为节点添加-job"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为节点添加-job"}},[t._v("#")]),t._v(" 为节点添加 job")]),t._v(" "),n("p",[t._v("节点的 job 代表了节点所支持的数据服务, job ID 通过一个 32 字节唯一标识。对于最终用户来说，\n"),n("code",[t._v("(Oracle 地址, job ID)")]),t._v(" 唯一标识了一个 WINkLink 节点提供的数据服务。\n每个 WINkLink 节点都可以提供多组数据服务。")]),t._v(" "),n("p",[t._v("WINkLink 节点正常运行后，就可以通过 HTTP API 为节点添加 job:")]),t._v(" "),n("p",[t._v("示例：(修改下面代码中 "),n("code",[t._v("address")]),t._v(" 参数为上述步骤中部署的 Oracle 合约地址)")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" --location --request POST "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:8080/job/specs'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type: application/json'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --data-raw "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n    "initiators": [\n        {\n        "type": "runlog",\n        "params": {\n            "address": "TR9jYcLWAcQfbKcP5oau1ccSbeW7mdnqg8"\n        }\n        }\n    ],\n    "tasks": [\n        {\n        "type": "httpget",\n        "params": {\n            "get": "https://www.okex.com/api/spot/v3/instruments/TRX-USDT/ticker",\n            "path": "last"\n        }\n        },\n        {\n        "type": "multiply",\n        "params": {\n            "times": 1000000\n        }\n        },\n        {\n        "type": "trontx"\n        }\n    ]\n    }\'')]),t._v("\n")])])]),n("h3",{attrs:{id:"查询节点-job"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查询节点-job"}},[t._v("#")]),t._v(" 查询节点 job")]),t._v(" "),n("p",[t._v("请求示例：")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" --location --request GET "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:8080/job/specs'")]),t._v("\n")])])]),n("h2",{attrs:{id:"为节点账户授权"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为节点账户授权"}},[t._v("#")]),t._v(" 为节点账户授权")]),t._v(" "),n("p",[t._v("节点账户需要授权才能向 Oracle 合约提交数据，否则会报错 "),n("code",[t._v('"Not an authorized node to fulfill requests"')]),t._v("。")]),t._v(" "),n("p",[t._v("需要使用 Oracle 合约的 owner 执行如下合约调用，将节点账户添加到白名单:")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setFulfillmentPermission(address,bool) [7fcd56db]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setFulfillmentPermission")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("address _node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bool _allowed")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("其中 "),n("code",[t._v("_node")]),t._v(" 为节点账户地址，"),n("code",[t._v("_allowed")]),t._v(" 为 "),n("code",[t._v("true")]),t._v(" 代表授权，为 "),n("code",[t._v("false")]),t._v(" 代表撤销授权。")]),t._v(" "),n("p",[t._v("示例调用例如 "),n("code",[t._v("setFulfillmentPermission(TGQVLckg1gDZS5wUwPTrPgRG4U8MKC4jcP, true)")]),t._v("。")]),t._v(" "),n("p",[t._v("合约调用可以使用如下任一工具或程序库：")]),t._v(" "),n("ul",[n("li",[t._v("TronScan 区块链浏览器 "),n("a",{attrs:{href:"https://tronscan.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mainnet"),n("OutboundLink")],1),t._v(", "),n("a",{attrs:{href:"https://nile.tronscan.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nile Testnet"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/tronprotocol/wallet-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方 wallet-cli 工具"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://cn.developers.tron.network/docs/ide%E5%85%A5%E9%97%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("TronIDE"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://cn.developers.tron.network/docs/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2",target:"_blank",rel:"noopener noreferrer"}},[t._v("TronBox"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://cn.developers.tron.network/reference#tronwebcontractat",target:"_blank",rel:"noopener noreferrer"}},[t._v("tronweb"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://tronpy.readthedocs.io/en/latest/contract.html#creating-smart-contract",target:"_blank",rel:"noopener noreferrer"}},[t._v("tronpy"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/andelf/rust-tron/blob/master/docs/contract.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("rust-tron"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"申请成为官方认证-winklink-节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#申请成为官方认证-winklink-节点"}},[t._v("#")]),t._v(" 申请成为官方认证 WINkLink 节点")]),t._v(" "),n("p",[t._v("以上步骤执行完毕后，节点即可对外提供服务。")]),t._v(" "),n("p",[t._v("节点可以向社区公布自己的 Oracle 合约地址和所支持的数据服务 job ID. 也可以申请成为 WINkLink 官方认证节点，\n在 WINkLink 官网列出自己的节点。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://docs.google.com/forms/d/e/1FAIpQLSe5mX6ZR13jBTgkO3D7jgio8f5ASTVYBObx8AAlyGs0hYyiJw/viewform",target:"_blank",rel:"noopener noreferrer"}},[t._v("申请表单"),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);