(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{380:function(t,e,a){"use strict";a.r(e);var n=a(24),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"winklink-random-number-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#winklink-random-number-service"}},[t._v("#")]),t._v(" WINkLink Random number Service")]),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("Verifiable Random Function (VRF) is the public-key version of a keyed cryptographic hash, which can be used as a random number. Only the holder of the private key can compute the hash, but anyone with the public key can verify the correctness of the hash.\nVRF can be used to generate secure and reliable random numbers.")]),t._v(" "),a("p",[t._v("Random number is determined by seed (provided by users), nonce (private state of VRFCoordinator contract) , block hash (the block of the request event) and private key of oracle node.")]),t._v(" "),a("p",[t._v("The generation process of VRF is:")]),t._v(" "),a("ul",[a("li",[t._v("A Dapp contract sends out an on-chain request for a random number;")]),t._v(" "),a("li",[t._v("Once the off-chain oracle node listens for the request, it generates a random number attaching the cryptographic proof to make the generated random number verifiable, and then submits them back to an oracle contract (VRFCoordinator);")]),t._v(" "),a("li",[t._v("Once the random number proof is verified by the oracle contract, the random number is published to the Dapp contract through a callback function.")])]),t._v(" "),a("p",[t._v("The process above ensures that the random number cannot be tampered with nor manipulated by anyone, including oracle operators, miners, users and even smart contract developers.")]),t._v(" "),a("p",[t._v("WINkLink VRF is a provably-fair and verifiable source of randomness designed for Dapp contracts. Dapp contract developers can use WINkLink VRF as a tamper-proof RNG (Random Number Generator) to build reliable smart contracts for any applications which rely on unpredictable random number:")]),t._v(" "),a("ul",[a("li",[t._v("Blockchain games and NFTs")]),t._v(" "),a("li",[t._v("Random assignment of duties and resources (e.g. randomly assigning judges to cases)")]),t._v(" "),a("li",[t._v("Choosing a representative sample for consensus mechanisms")])]),t._v(" "),a("p",[t._v("This article describes how to deploy and use the WINkLink VRF service.")]),t._v(" "),a("h2",{attrs:{id:"before-you-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before-you-start"}},[t._v("#")]),t._v(" Before you start")]),t._v(" "),a("p",[t._v("Maintainers for WINkLink need to understand how the TRON platform works, and know about smart contract deployment and the process of calling them. You're suggested to read related "),a("a",{attrs:{href:"https://cn.developers.tron.network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TRON official documents"),a("OutboundLink")],1),t._v(", particularly those on contract deployment on TronIDE.")]),t._v(" "),a("p",[t._v("Prepare the node account. You should read related "),a("a",{attrs:{href:"https://doc.winklink.org/v1/doc/en/deploy.html#prepare-node-account",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node account preparation doc"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"vrfcoordinator-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vrfcoordinator-contract"}},[t._v("#")]),t._v(" VRFCoordinator Contract")]),t._v(" "),a("p",[t._v("VRFCoordinator contract is deployed on the TRON public chain with the following features:")]),t._v(" "),a("ul",[a("li",[t._v("Receive random number requests from Dapp contract and emit VRFRequest event\n"),a("ul",[a("li",[t._v("WIN transfer as fees, will be sent along with the request")])])]),t._v(" "),a("li",[t._v("Accept random number and the proof submitted from WINkLink node\n"),a("ul",[a("li",[t._v("VRFCoordinator contract will verify the proof before sending the random number to Dapp contract")])])]),t._v(" "),a("li",[t._v("Calculate the WINkLink node rewards for the request fulfilment")])]),t._v(" "),a("p",[t._v("VRFCoordinator contract code is available at "),a("a",{attrs:{href:"https://github.com/wink-link/winklink/blob/feature/rename2wink/tvm-contracts/v1.0/VRF/VRFCoordinator.sol",target:"_blank",rel:"noopener noreferrer"}},[t._v("VRFCoordinator.sol"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("p",[t._v("Some parameters are needed in the constructor function when deploying a VRFCoordinator contract:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("address _win"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address _winkMid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address _blockHashStore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("_blockHashStore")]),t._v(" BlockHashStore address, "),a("code",[t._v("_win")]),t._v(" WIN token address, "),a("code",[t._v("_winkMid")]),t._v(" WinkMid contract address.")]),t._v(" "),a("p",[t._v("For convenience, Nile testnet has deployed "),a("code",[t._v("WinkMid")]),t._v(" contract and encapsulated the "),a("code",[t._v("WIN")]),t._v(" token on it. Developers can use this contract address directly without additional deployment. Users can also claim test TRX and WIN tokens from the Faucet address provided by Nile testnet.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Nile Testnet")]),t._v(" "),a("ul",[a("li",[t._v("WIN TRC20 Contract Address: "),a("code",[t._v("TNDSHKGBmgRx9mDYA9CnxPx55nu672yQw2")])]),t._v(" "),a("li",[t._v("WinkMid Contract Address: "),a("code",[t._v("TFbci8j8Ja3hMLPsupsuYcUMsgXniG1TWb")])]),t._v(" "),a("li",[t._v("Testnet Faucet: "),a("a",{attrs:{href:"https://nileex.io/join/getJoinPage",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://nileex.io/join/getJoinPage"),a("OutboundLink")],1)])])]),t._v(" "),a("h2",{attrs:{id:"tron-mainnet-winklink-info"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tron-mainnet-winklink-info"}},[t._v("#")]),t._v(" Tron Mainnet WINkLink Info")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Item")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LINK Token")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TLa2f6VPqDgRE67v1736s7bJ8Ray5wYjU7")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("WinkMid")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TKy2MGKR6rQKBwM7dneUEnh2kvsodRR1Jo")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("VRFCoordinator")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TTMLZ9e14KVCXkQrCSGRBS4r5iQPXGP1bA")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Key Hash 1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x284367a1c6c6cfee60d3343b399e8353da9a1482bdfddb549d217787a4c558f2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Key Hash 2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x489db76c028fb5020e0c3d4fd7126f9c2750c7f52f3e03941c5bfcbe1c27d2a5")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Key Hash 3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0xe90fbf3bd9cce99d28f7110a4afaa965f03061a6d6dd5a6f6dd6b0f937d73a63")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("fee")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4 WIN")])])])]),t._v(" "),a("h2",{attrs:{id:"node-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-deployment"}},[t._v("#")]),t._v(" Node Deployment")]),t._v(" "),a("p",[t._v("For node deployment, please refer to "),a("a",{attrs:{href:"https://doc.winklink.org/v1/doc/en/deploy.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("WINkLink Node Deploy Doc"),a("OutboundLink")],1),t._v(" .  This section only lists the differences of VRF node deployment.")]),t._v(" "),a("p",[t._v("WINkLink node should be deployed after the VRFCoordinator contract is deployed.")]),t._v(" "),a("p",[t._v("WINkLink node (project directory "),a("code",[t._v("node")]),t._v(") code is available at: "),a("a",{attrs:{href:"https://github.com/wink-link/winklink/tree/feature/rename2wink/node",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/wink-link/winklink/tree/feature/rename2wink/node"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("After compilation, "),a("code",[t._v("node-v1.0.jar")]),t._v(" will be stored in "),a("code",[t._v("node/build/libs/")]),t._v(" under the project root directory.")]),t._v(" "),a("h3",{attrs:{id:"node-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-configuration"}},[t._v("#")]),t._v(" Node Configuration")]),t._v(" "),a("p",[t._v("After the node configuration file is confirmed, it is required to create a "),a("code",[t._v("vrfKeyStore.yml")]),t._v(" file and set the private key for VRF (support multiple VRF private keys in one node):")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("privateKeys:\n  - *****(private key in hexadecimal format)\n")])])]),a("p",[t._v("Support for dynamically updating vrfkeystore without restarting the node server. The steps are:")]),t._v(" "),a("p",[t._v("First, add a new VRF private key to the "),a("code",[t._v("vrfKeyStore.yml")])]),t._v(" "),a("p",[t._v("Second, execute the following command:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" --location --request GET "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:8081/vrf/updateVRFKey/vrfKeyStore.yml'")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("It is for important safety concerns that you use files to provide private information instead of the command line. In the production environment, set the permission of the private file "),a("code",[t._v("vrfKeyStore")]),t._v(" as 600, meaning that only the owner can read or write the data.")])]),t._v(" "),a("h3",{attrs:{id:"start-a-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-a-node"}},[t._v("#")]),t._v(" Start a Node")]),t._v(" "),a("p",[t._v("All configuration files need to be copied to the directory where your node is running in, use the command "),a("code",[t._v("cp node/src/main/resource/*.yml ./")]),t._v(".\nAt the same time, the "),a("code",[t._v("tronApiKey")]),t._v(" part of the "),a("code",[t._v("application dev")]),t._v(" file needs to be filled with apikey.")]),t._v(" "),a("p",[t._v("Start your WINkLink node using the following command:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("java -jar node/build/libs/node-v1.0.jar -k key.store -vrfK vrfKeyStore.yml\n")])])]),a("p",[t._v("Configuration items can also be specified using a command line. For example:")]),t._v(" "),a("p",[t._v("mainnet:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("java -jar node/build/libs/node-v1.0.jar --server.port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v(" --spring.profiles.active"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("dev --key key.store  --vrfKey vrfKeyStore.yml\n")])])]),a("p",[t._v("nile testnet:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("java -jar node/build/libs/node-v1.0.jar --env dev --server.port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v(" --spring.profiles.active"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("dev --key key.store  --vrfKey vrfKeyStore.yml\n")])])]),a("p",[t._v("Determine whether your WINkLink node is running properly using the following command:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" -f logs/tron.log\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Your node account must have enough TRX tokens for contract calls.\nYou can apply testnet tokens at Testnet Faucet.")])]),t._v(" "),a("h3",{attrs:{id:"add-a-job-to-your-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-a-job-to-your-node"}},[t._v("#")]),t._v(" Add a Job to Your Node")]),t._v(" "),a("p",[t._v("The job of your node represents the data service that your node supports, and each job has a unique 32-byte ID.")]),t._v(" "),a("p",[t._v("When your WINkLink node is running properly, you can add a job to your node via HTTP API:")]),t._v(" "),a("p",[t._v("Example: (change the parameter below:  "),a("code",[t._v("address")]),t._v("  is the VRFCoordinator contract address deployed in the steps above;\n"),a("code",[t._v("publicKey")]),t._v(" is the compressed value of the node's public key, which can be obtained by viewing the terminal display after the node starts, and the corresponding item is "),a("code",[t._v("eckey compressed")]),t._v(")")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" --location --request POST "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:8081/job/specs'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --header "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type: application/json'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --data-raw "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n    "initiators": [\n        {\n        "type": "randomnesslog",\n        "params": {\n            "address": "TYmwSFuFuiDZCtYsRFKCNr25byeqHH7Esb"\n        }\n        }\n    ],\n    "tasks": [\n        {\n        "type": "random",\n        "params": {\n        "publicKey":"0x024e6bda4373bea59ec613b8721bcbb56222ab2ec10b18ba24ae369b7b74ab1452"\n        }\n        },\n        {\n        "type": "trontx",\n        "params": {\n            "type": "TronVRF"\n        }\n\t}\n    ]\n    }\'')]),t._v("\n")])])]),a("h3",{attrs:{id:"query-jobs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-jobs"}},[t._v("#")]),t._v(" Query Jobs")]),t._v(" "),a("p",[t._v("Request example:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" --location --request GET "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:8081/job/specs'")]),t._v("\n")])])]),a("h2",{attrs:{id:"authorize-a-node-account"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authorize-a-node-account"}},[t._v("#")]),t._v(" Authorize a Node Account")]),t._v(" "),a("p",[t._v("Node account needs authorization to submit data to VRFCoordinator contract, otherwise error will be reported.")]),t._v(" "),a("p",[t._v("The owner of the VRFCoordinator contract is required to call the contract below and add the node account to the whitelist:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerProvingKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("uint256 _fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address _oracle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bytes calldata _publicProvingKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bytes32 _jobID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("_fee")]),t._v(" is the minimum WIN token cost required for the registration node to generate random numbers,\n"),a("code",[t._v("_oracle")]),t._v(" is the address of the registered node, which is used to receive the WIN token paid by DAPP ,\n"),a("code",[t._v("_publicProvingKey")]),t._v(" is the public key used by the registration node to generate random numbers, which is "),a("code",[t._v("x || y")]),t._v(",\n"),a("code",[t._v("_jobID")]),t._v(" is the jobID of VRF service of the node.")]),t._v(" "),a("p",[t._v("Call example: "),a("code",[t._v("registerProvingKey（10,TYmwSFuFuiDZCtYsRFKCNr25byeqHH7Esb, 0x4e6bda4373bea59ec613b8721bcbb56222ab2ec10b18ba24ae369b7b74ab145224d509bc2778e6d1c8a093522ba7f9b6669a9aef57d2231f856e4b594ad5f4ac, 04d773890bc347f88544dc85bea24985）")])]),t._v(" "),a("h2",{attrs:{id:"dapp-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dapp-contract"}},[t._v("#")]),t._v(" Dapp Contract")]),t._v(" "),a("p",[t._v("An example of a Dapp contract code is available at  "),a("a",{attrs:{href:"https://github.com/wink-link/winklink/blob/feature/rename2wink/tvm-contracts/v1.0/VRF/VRFD20.sol",target:"_blank",rel:"noopener noreferrer"}},[t._v("VRFD20.sol"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("In this example, we'll create a contract with a Game of Thrones theme. It will request randomness from Chainlink VRF, the result of which it will transform into a number between 1 and 20, mimicking the rolling of a 20 sided dice. Each number represents a Game of Thrones house. So, if you land a 1, you are assigned house Targaryan, 2 is Lannister, and so on.")]),t._v(" "),a("p",[t._v("When rolling the dice, it will accept an address variable to track which address is assigned to each house.")]),t._v(" "),a("p",[t._v("When writing for a new Dapp contract, the main steps are:")]),t._v(" "),a("ul",[a("li",[t._v("a) Import VRFConsumerBase:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  pragma solidity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.6")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./VRFConsumerBase.sol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  contract "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VRFD20")]),t._v(" is VRFConsumerBase "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("b) Set "),a("code",[t._v("s_keyHash")]),t._v(" to identify the VRF key to generate the random number; "),a("code",[t._v("s_fee")]),t._v(" for the fee amount in one request.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  bytes32 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" s_keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  uint256 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" s_fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("c) Dapp contract initialization:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("address vrfCoordinator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address win"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address winkMid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bytes32 keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uint256 fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VRFConsumerBase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vrfCoordinator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" win"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" winkMid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    s_keyHash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s_fee "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("d) Call "),a("code",[t._v("requestRandomness")]),t._v(" to request for random number, and get "),a("code",[t._v("requestId")]),t._v(" for the specific request:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rollDice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("uint256 userProvidedSeed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address roller")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("winkMid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("balanceOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" s_fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Not enough WIN to pay fee"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    requestId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestRandomness")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s_keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s_fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" userProvidedSeed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    emit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DiceRolled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("requestId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" roller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("e) Fulfill "),a("code",[t._v("fulfillRandomness")]),t._v(" used by VRFCoordinator contract to send the verified random number "),a("code",[t._v("randomness")]),t._v(" (for a specific request "),a("code",[t._v("requestId")]),t._v(") back to.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fulfillRandomness")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("bytes32 requestId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uint256 randomness")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" internal override "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    uint256 d20Value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" randomness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s_results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("s_rollers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("requestId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d20Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    emit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DiceLanded")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("requestId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d20Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"dapp-contract-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dapp-contract-deployment"}},[t._v("#")]),t._v(" Dapp Contract Deployment")]),t._v(" "),a("p",[t._v("Some parameters are needed in the constructor function when deploying a Dapp contract")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("address vrfCoordinator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address win"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address winkMid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bytes32 keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uint256 fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("vrfCoordinator")]),t._v(" the address of VRFCoordinator, "),a("code",[t._v("win")]),t._v(" WIN token address, "),a("code",[t._v("winkMid")]),t._v(" WinkMid contract address,\n"),a("code",[t._v("keyHash")]),t._v(" the hash value of the public key of the registered node, which can be obtained by calling the "),a("code",[t._v("hashofkeybytes")]),t._v(" function of the VRFCoordinator contract (input is "),a("code",[t._v("x || y")]),t._v(").\n"),a("code",[t._v("fee")]),t._v(" the WIN token fee payed for generating random number, and its value should be greater than the fee required by random number node.")]),t._v(" "),a("p",[t._v("Example:  "),a("code",[t._v("constructor（TUeVYd9ZYeKh87aDA9Tp7F5Ljc47JKC37x,TNDSHKGBmgRx9mDYA9CnxPx55nu672yQw2, TFbci8j8Ja3hMLPsupsuYcUMsgXniG1TWb,0xe4f280f6d621db4bccd8568197e3c84e3f402c963264369a098bb2f0922cb125,12）")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"transfer-win-tokens-to-the-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-win-tokens-to-the-contract"}},[t._v("#")]),t._v(" Transfer WIN Tokens to the Contract")]),t._v(" "),a("p",[t._v("VRFD20 contract needs to call the VRFCoordinator contract, so there should be enough WIN tokens in the contract account. You can transfer a certain amount of WIN tokens for the contract through the transfer service or the TestNet Faucet.")]),t._v(" "),a("h3",{attrs:{id:"call-the-dapp-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-the-dapp-contract"}},[t._v("#")]),t._v(" Call the Dapp Contract")]),t._v(" "),a("p",[t._v("Use the following interface to request random number:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rollDice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("uint256 userProvidedSeed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address roller")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("userProvidedSeed")]),t._v(" the seed provided by the user,"),a("code",[t._v("roller")]),t._v(" You can fill in any address at present.\nCall example: "),a("code",[t._v("rollDice(0x852f725894485e4979af5ea47ddd90cc68ea1ac0f4b99e52e9b91fa35a7204e2, TL44GNkjETr2JumQHgYJF842oyE6h2inoR)")]),t._v(".")])])}),[],!1,null,null,null);e.default=s.exports}}]);