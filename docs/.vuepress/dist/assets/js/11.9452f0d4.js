(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{368:function(e,t,a){"use strict";a.r(t);var r=a(24),n=function(e){e.options.__data__block__={mermaid_1a962851:"flowchart LR\n    A[External data source] <--\x3e B[WINkLink node] <--\x3e C[TRON BlockChain API]\n",mermaid_382ee1c9:"sequenceDiagram\n    Caller->>ConsumerContract: request an oracle data update\n    activate ConsumerContract\n    ConsumerContract->>OracleContract: transferAndCall send token and request\n    activate OracleContract\n    OracleContract->>OracleContract: emit OracleRequest event\n    OracleContract--\x3e>ConsumerContract: request ID\n    deactivate OracleContract\n    ConsumerContract--\x3e>Caller: request ID\n    deactivate ConsumerContract\n",mermaid_382ee1e5:"sequenceDiagram\n    Note over WINKLinkNode: get an event from Event API\n    activate WINKLinkNode\n    WINKLinkNode->>WINKLinkNode: call different adapter according to job ID\n    WINKLinkNode->>OracleContract: fulfill call, submit data\n    activate OracleContract\n    OracleContract->>ConsumerContract: call callback function\n    activate ConsumerContract\n    ConsumerContract->>ConsumerContract: update data according to callback logic\n    ConsumerContract--\x3e>OracleContract: success?\n    deactivate ConsumerContract\n    deactivate OracleContract\n    deactivate WINKLinkNode\n"}},o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"design-of-system-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design-of-system-architecture"}},[e._v("#")]),e._v(" Design of System Architecture")]),e._v(" "),a("h2",{attrs:{id:"winklink-node-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#winklink-node-model"}},[e._v("#")]),e._v(" WINkLink Node Model")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_1a962851",graph:e.$dataBlock.mermaid_1a962851}}),a("p",[e._v("There are three main modules as illustrated above:")]),e._v(" "),a("ul",[a("li",[e._v("External data source")]),e._v(" "),a("li",[e._v("WINkLink node")]),e._v(" "),a("li",[e._v("TRON blockchain")])]),e._v(" "),a("p",[e._v("Above are the main components that make up the node structure of WINkLink oracle. We will introduce them one by one.")]),e._v(" "),a("h3",{attrs:{id:"external-data-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-data-source"}},[e._v("#")]),e._v(" External Data Source")]),e._v(" "),a("p",[e._v("External data source refers to the external data available to the native blockchain, including centralized exchanges, centralized oracles, stock exchange APIs, etc.")]),e._v(" "),a("h3",{attrs:{id:"winklink-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#winklink-node"}},[e._v("#")]),e._v(" WINkLink Node")]),e._v(" "),a("p",[e._v("WINkLink node runs task processing, monitors on-chain contract requests (via Event), retrieves data from external data sources and submits results to the blockchain.")]),e._v(" "),a("h3",{attrs:{id:"tron-blockchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tron-blockchain"}},[e._v("#")]),e._v(" TRON blockchain")]),e._v(" "),a("p",[e._v("Blockchain node mainly refers to the API services provided by the TRON blockchain, including Fullnode API and Event API services. Through these APIs, WINkLink node can monitor specific contract events to trigger tasks, sign broadcasted transactions and return data back to "),a("strong",[e._v("the consumer contract")]),e._v(".")]),e._v(" "),a("p",[e._v("As suggested by the double-headed arrow, WINkLink node subscribes blockchain events while broadcasting transactions via API and returning data results.")]),e._v(" "),a("h2",{attrs:{id:"winklink-request-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#winklink-request-model"}},[e._v("#")]),e._v(" WINkLink Request Model")]),e._v(" "),a("h3",{attrs:{id:"create-a-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-request"}},[e._v("#")]),e._v(" Create a Request")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee1c9",graph:e.$dataBlock.mermaid_382ee1c9}}),a("h3",{attrs:{id:"process-a-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-a-request"}},[e._v("#")]),e._v(" Process a Request")]),e._v(" "),a("p",[e._v("Oracle's contract events will asynchronously trigger the following procedure:")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee1e5",graph:e.$dataBlock.mermaid_382ee1e5}}),a("h2",{attrs:{id:"aggregation-request-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aggregation-request-model"}},[e._v("#")]),e._v(" Aggregation Request Model")]),e._v(" "),a("p",[e._v("In actual implementation, multiple oracles need to be aggregated to obtain more accurate results and filter out outliers.")]),e._v(" "),a("p",[e._v("For example, the price aggregation feature retrieves information from multiple oracles and generates an average price or a median price.")]),e._v(" "),a("p",[e._v("To learn more about the logic of price aggregation, please refer to: "),a("a",{attrs:{href:"https://github.com/wink-link/winklink/blob/master/tvm-contracts/v1.0/TronUser.sol",target:"_blank",rel:"noopener noreferrer"}},[e._v("AggregatorInterface"),a("OutboundLink")],1),e._v(".")])],1)}),[],!1,null,null,null);"function"==typeof n&&n(o);t.default=o.exports}}]);