(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{369:function(a,t,e){"use strict";e.r(t);var n=e(24),r=function(a){a.options.__data__block__={mermaid_1a962851:"flowchart LR\n    外部数据源 <--\x3e B[WINkLink Node] <--\x3e C[TRON BlockChain API]\n",mermaid_382ee1c9:"sequenceDiagram\n    调用者->>消费者合约: 请求更新预言机数据\n    activate 消费者合约\n    消费者合约->>预言机合约: transferAndCall 发送代币和请求\n    activate 预言机合约\n    预言机合约->>预言机合约: emit OracleRequest\n    预言机合约--\x3e>消费者合约: request ID\n    deactivate 预言机合约\n    消费者合约--\x3e>调用者: request ID\n    deactivate 消费者合约\n",mermaid_382ee1e5:"sequenceDiagram\n    Note over WINKLinkNode: 从 Event API 监听到事件\n    activate WINKLinkNode\n    WINKLinkNode->>WINKLinkNode: 依 job ID 调用不同的适配器获得数据\n    WINKLinkNode->>预言机合约: fulfill 调用提交结果\n    activate 预言机合约\n    预言机合约->>消费者合约: 调用回调函数\n    activate 消费者合约\n    消费者合约->>消费者合约: 按回调逻辑更新数据\n    消费者合约--\x3e>预言机合约: success?\n    deactivate 消费者合约\n    deactivate 预言机合约\n    deactivate WINKLinkNode\n"}},i=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"系统架构设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统架构设计"}},[a._v("#")]),a._v(" 系统架构设计")]),a._v(" "),e("h2",{attrs:{id:"winklink-节点模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#winklink-节点模型"}},[a._v("#")]),a._v(" WINkLink 节点模型")]),a._v(" "),e("Mermaid",{attrs:{id:"mermaid_1a962851",graph:a.$dataBlock.mermaid_1a962851}}),e("p",[a._v("如上图，我们可以看到三个主要模块：")]),a._v(" "),e("ul",[e("li",[a._v("外部数据源")]),a._v(" "),e("li",[a._v("WINkLink 节点")]),a._v(" "),e("li",[a._v("TRON blockchain")])]),a._v(" "),e("p",[a._v("这些是 WINkLink 预言机节点架构的主要组成部分，下面我们将逐个介绍。")]),a._v(" "),e("h3",{attrs:{id:"外部数据源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#外部数据源"}},[a._v("#")]),a._v(" 外部数据源")]),a._v(" "),e("p",[a._v("外部数据源代表原生区块链外部可获取的数据，例如中心化交易所、中心化预言机、股票交易所的 API 接口等。")]),a._v(" "),e("h3",{attrs:{id:"winklink-节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#winklink-节点"}},[a._v("#")]),a._v(" WINkLink 节点")]),a._v(" "),e("p",[a._v("WINkLink 节点运行任务处理，监听链上合约请求(以 Event 方式监听)，从外部数据源获取数据，然后向区块链提交数据结果。")]),a._v(" "),e("h3",{attrs:{id:"tron-blockchain"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tron-blockchain"}},[a._v("#")]),a._v(" TRON blockchain")]),a._v(" "),e("p",[a._v("区块链节点主要指 TRON 区块链提供的 API 服务，包括 Fullnode API 和 Event API 服务。\n通过这些 API, WINkLink 节点可以监听特定合约事件来启动任务，同时也可以通过 API 服务签名广播交易，\n将数据返回给"),e("strong",[a._v("消费者合约")]),a._v("。")]),a._v(" "),e("p",[a._v("箭头表示的连接性是双向的, WINkLink 节点既订阅区块链事件，又通过 API 发布交易，提交数据结果。")]),a._v(" "),e("h2",{attrs:{id:"winklink-请求模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#winklink-请求模型"}},[a._v("#")]),a._v(" WINkLink 请求模型")]),a._v(" "),e("h3",{attrs:{id:"创建请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建请求"}},[a._v("#")]),a._v(" 创建请求")]),a._v(" "),e("Mermaid",{attrs:{id:"mermaid_382ee1c9",graph:a.$dataBlock.mermaid_382ee1c9}}),e("h3",{attrs:{id:"处理请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理请求"}},[a._v("#")]),a._v(" 处理请求")]),a._v(" "),e("p",[a._v("预言机合约的事件会异步触发如下流程：")]),a._v(" "),e("Mermaid",{attrs:{id:"mermaid_382ee1e5",graph:a.$dataBlock.mermaid_382ee1e5}}),e("h2",{attrs:{id:"聚合请求模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚合请求模型"}},[a._v("#")]),a._v(" 聚合请求模型")]),a._v(" "),e("p",[a._v("在实际应用中，往往需要通过聚合多个预言机的方法来获得更准确的结果，同时过滤掉异常值。")]),a._v(" "),e("p",[a._v("例如价格聚合功能，从多个交易所提供的预言机服务聚合得到平均价格或中位数价格。")]),a._v(" "),e("p",[a._v("价格聚合相关逻辑参考: "),e("a",{attrs:{href:"https://github.com/wink-link/winklink/blob/master/tvm-contracts/v1.0/TronUser.sol",target:"_blank",rel:"noopener noreferrer"}},[a._v("AggregatorInterface"),e("OutboundLink")],1)])],1)}),[],!1,null,null,null);"function"==typeof r&&r(i);t.default=i.exports}}]);